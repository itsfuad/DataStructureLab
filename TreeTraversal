#include <iostream>

class Node{
    public: 
        int data;
        Node* left;
        Node* right;
};

class Tree{
    public:
        Node* root;
        Tree(){
            root = nullptr;
        }

        void insert(int data){
            Node* newNode = new Node();
            newNode->data = data;
            newNode->left = nullptr;
            newNode->right = nullptr;

            if(root == nullptr){
                root = newNode;
            }else{
                Node* temp = root;
                while(temp != nullptr){
                    if(data < temp->data){
                        if(temp->left == nullptr){
                            temp->left = newNode;
                            break;
                        }else{
                            temp = temp->left;
                        }
                    }else{
                        if(temp->right == nullptr){
                            temp->right = newNode;
                            break;
                        }else{
                            temp = temp->right;
                        }
                    }
                }
            }
        }

        void printInOrder(Node* node){
            if(node == nullptr){
                return;
            }
            printInOrder(node->left);
            std::cout << node->data << " ";
            printInOrder(node->right);
        }

        void printInOrder(){
            printInOrder(root);
            std::cout << std::endl;
        }

        void printPostOrder(Node* node){
            if(node == nullptr){
                return;
            }
            printPostOrder(node->left);
            printPostOrder(node->right);
            std::cout << node->data << " ";
        }

        void printPostOrder(){
            printPostOrder(root);
            std::cout << std::endl;
        }

        void printPreOrder(Node* node){
            if(node == nullptr){
                return;
            }
            std::cout << node->data << " ";
            printPreOrder(node->left);
            printPreOrder(node->right);
        }

        void printPreOrder(){
            printPreOrder(root);
            std::cout << std::endl;
        }

        int height(Node* node){
            if(node == nullptr){
                return 0;
            }
            int leftHeight = height(node->left);
            int rightHeight = height(node->right);
            if(leftHeight > rightHeight){
                return leftHeight + 1;
            }else{
                return rightHeight + 1;
            }
        }

        int height(){
            return height(root);
        }

        int count(Node* node){
            if(node == nullptr){
                return 0;
            }
            int leftCount = count(node->left);
            int rightCount = count(node->right);
            return leftCount + rightCount + 1;
        }

        int count(){
            return count(root);
        }
};


int main(){
    Tree tree;
    tree.insert(10);
    tree.insert(5);
    tree.insert(15);
    tree.insert(3);
    tree.insert(7);
    tree.insert(12);
    tree.insert(17);
    tree.insert(1);
    tree.insert(4);
    tree.insert(6);
    tree.insert(8);

    std::cout << "Pre Order" << std::endl;
    tree.printPreOrder();

    std::cout << "In Order" << std::endl;
    tree.printInOrder();

    std::cout << "Post Order" << std::endl;
    tree.printPostOrder();
}
